import random
import collections  # provides 'deque'
import inspect

import networkx as nx

from rl_learning import Globals
import Utils
import PacketGenerator
from enum import Enum
import packet


class OLT(object):
    """
    Models an optical network unit
    """

    def __init__(self, env, M, node_name, verbose):
        self.M = M
        self.odn = M.odn
        self.env = env  # SimPy environment
        self.name = node_name  # must be unique
        self.type = M.G.nodes[node_name][Globals.NODE_TYPE_KWD]
        self.pkt_rate = M.G.nodes[node_name][Globals.NODE_PKT_RATE_KWD]
        self.proc_delay = M.G.nodes[node_name][Globals.NODE_PROC_DELAY_KWD]
        self.queue_check = M.G.nodes[node_name][Globals.NODE_QUEUE_CHECK_KWD]
        self.queue_cutoff = M.G.nodes[node_name][Globals.NODE_QUEUE_CUTOFF_KWD]
        # precomputed table of shortest paths
        self.path_G = None
        self.nodes = nx.nodes(M.G)

        self.start_time = -1
        self.end_time = -1
        self.prop_delay = 0.001

        self.conns = {}
        # self.customConnections = {}
        self.verbose = verbose

        # processing queue and queue length monitor
        self.proc_queue = collections.deque()
        self.queue_mon = collections.deque()

        # packets persistent storage
        self.generated = collections.deque()
        self.received = collections.deque()
        self.forwarded = collections.deque()
        self.discarded = collections.deque()

        # counters for sent/received packets (key=node name)
        self.pkt_sent = {}
        self.pkt_recv = {}
        self.FB_remaining = Globals.FB
        self.onu_queue_status = {}  # {1: {1: 1400, 2: 500}, onu_id:{tcon_id: reported_size}}
        self.tcon_alloc_matrix = {}  # {1: {1: 1400, 2: 500}, onu_id:{tcon_id: reported_size}}
        self.tcon_unsatisfied_matrix = {}  # {1: {1: 1400, 2: 500}, onu_id:{tcon_id: reported_size}}
        self.vb_min_matrix = {}  # {1: {1: 1400, 2: 500}, onu_id:{tcon_id: reported_size}}
        self.vb_sur_matrix = {}  # {1: {1: 1400, 2: 500}, onu_id:{tcon_id: reported_size}}
        for x in M.G.nodes():
            if M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE or M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                self.onu_queue_status[x] = {Globals.TCON1_ID: 0, Globals.TCON2_ID: 0}
                self.tcon_alloc_matrix[x] = {Globals.TCON1_ID: 0, Globals.TCON2_ID: 0}
                self.tcon_unsatisfied_matrix[x] = {Globals.TCON1_ID: 0, Globals.TCON2_ID: 0}
            if M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                self.vb_min_matrix[x] = {Globals.TCON1_ID: Globals.URLLC_AB_MIN, Globals.TCON2_ID: Globals.EMBB_AB_MIN}
                self.vb_sur_matrix[x] = {Globals.TCON1_ID: 0, Globals.TCON2_ID: Globals.EMBB_AB_SUR}
            if M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                self.vb_min_matrix[x] = {Globals.TCON1_ID: Globals.VIDEO_AB_MIN, Globals.TCON2_ID: Globals.IP_AB_MIN}
                self.vb_sur_matrix[x] = {Globals.TCON1_ID: Globals.VIDEO_AB_SUR, Globals.TCON2_ID: Globals.IP_AB_SUR}
    
        # dt interval for incoming queue monitoring
        self.queue_monitor_deltat = Globals.QUEUE_MONITOR_DELTAT

    def add_conn(self, c, conn):
        """Adds a connection from this node to the node 'c'"""
        self.conns[c] = conn
        # self.customConnections[c] = customConnection
        self.pkt_sent[c] = 0
        self.pkt_recv[c] = 0

    def if_up(self):
        """Activates interfaces- this sets up SimPy processes"""

        # start recv processes on all receiving connections
        for c in self.conns:
            self.env.process(self.if_recv(c))

        # activate packet generator, packet forwarding, queue monitoring
        self.env.process(self.pkt_gen_process())
        self.env.process(self.forward_process())
        self.env.process(self.queue_monitor())

    def if_recv(self, c):
        """Node receive interface from node 'c'"""

        # the connection from 'self.name' to 'c'
        conn = self.conns[c]

        while True:

            # pick up any incoming packets
            pkt = yield conn.get()

            if len(self.proc_queue) < self.queue_cutoff:

                # increment the counter for this sending node
                self.pkt_recv[c] += 1

                # put the packet in the processing queue
                self.proc_queue.append(pkt)

                # report as per verbose level
                if self.verbose >= Globals.VERB_LO:
                    Utils.report(
                        self.env.now,
                        self.name,
                        pkt,
                        self.proc_queue,
                        inspect.currentframe().f_code.co_name,
                        self.verbose,
                    )

            else:  # processing queue full, discard this packet

                self.discard_packet(pkt)

                # report as per verbose level
                if self.verbose >= Globals.VERB_LO:
                    Utils.report(
                        self.env.now,
                        self.name,
                        pkt,
                        self.proc_queue,
                        inspect.currentframe().f_code.co_name + "_discard",
                        self.verbose,
                    )

    def forward_process(self):
        """Node packet forwarding process"""

        while True:

            # if there are any packets in the processing queue
            if len(self.proc_queue) > 0:

                # get the first packet from the queue
                pkt = self.proc_queue.popleft()
                source_node = pkt[Globals.SOURCE]  # source node
                dest_node = pkt[Globals.DEST_NODE]  # destination node

                # report as per verbose level
                if self.verbose >= Globals.VERB_LO:
                    Utils.report(
                        self.env.now,
                        self.name,
                        pkt,
                        self.proc_queue,
                        inspect.currentframe().f_code.co_name + "_get",
                        self.verbose,
                    )

                # the destination is *this* node
                if (
                    dest_node == self.name
                    or dest_node == Globals.BROADCAST_REPORT_DEST_ID
                ):

                    # incur packet processing time
                    yield self.env.timeout(self.proc_delay)

                    # set the destination arrival time
                    pkt[Globals.DEST_TIME_STAMP] = self.env.now

                    # packet terminates here- put it in the receive queue
                    self.received.append([self.env.now, pkt])

                    self.process_report_msg(pkt)

                    # report as per verbose level
                    if self.verbose >= Globals.VERB_LO:
                        Utils.report(
                            self.env.now,
                            self.name,
                            pkt,
                            self.proc_queue,
                            inspect.currentframe().f_code.co_name + "_sink",
                            self.verbose,
                        )

                # the destination is some other node, forward packet
                else:
                    # incur packet processing time
                    yield self.env.timeout(self.proc_delay)
                    now = self.env.now
                    trans_time = self.computeTransTime(pkt) + self.prop_delay

                    # increment the packet hop counter
                    pkt[Globals.NO_HOPS] += 1

                    # get next-hop node along the shortest path
                    hop_node = 0

                    # register the next-hop node with the packet
                    pkt[Globals.HOP_NODE] = hop_node

                    # forward packet to the next-hop node
                    yield self.env.timeout(trans_time - self.prop_delay)
                    self.send_to_odn(pkt, hop_node)

                    # count this packet as sent to 'hop_node'
                    self.pkt_sent[self.name] += 1

                    # if the source node is not this node, record that
                    # the packet was forwarded by this node
                    # if source_node != self.name:
                    self.forwarded.append([self.env.now, pkt])

                    # report as per verbose level
                    if self.verbose >= Globals.VERB_LO:
                        Utils.report(
                            self.env.now,
                            self.name,
                            pkt,
                            self.proc_queue,
                            inspect.currentframe().f_code.co_name + "_fwd",
                            self.verbose,
                        )

            # self.queue is empty
            else:
                #  incur queue check delay
                yield self.env.timeout(self.queue_check)

    def process_report_msg(self, pkt):
        onuId = pkt[Globals.REPORT_PACKET_ONU_ID_FIELD]
        tconRequestedSizes = pkt[Globals.REPORT_PACKET_QUEUE_LENGTH_FIELD]
        self.onu_queue_status[onuId] = tconRequestedSizes

    def computeTransTime(self, pkt):
        return 0

    def send_to_odn(self, pkt, dest_node):
        """Sends packet to the destination node"""

        # get the connection to the destination node
        # conn = self.conns[self.name]
        # conn.put(pkt)  # put the packet onto the connection
        self.env.process(self.odn.put_grant(pkt, self.prop_delay))
        # report as per verbose level
        if self.verbose > Globals.VERB_NO:
            Utils.report(
                self.env.now,
                self.name,
                pkt,
                self.proc_queue,
                inspect.currentframe().f_code.co_name,
                self.verbose,
            )

    def pkt_gen_process(self):
        """Process that generates networks packets"""

        while True:

            # pkt_gen_deltat = PacketGenerator.run(self.pkt_rate)

            # choose the destination node
            dest_node = random.choice(list(self.nodes))
            while dest_node == self.name:
                dest_node = random.choice(list(self.nodes))
            dest_node = Globals.BROADCAST_GRANT_DEST_ID

            # create the packet
            bwm = self.generateGrantMsg()
            pkt = packet.make_grant_packet(self.env, dest_node, self.name, bwm)

            # if the forward queue is full, discard the last received
            # packet to open space in the queue
            if len(self.proc_queue) >= self.queue_cutoff:
                pkt_discard = self.proc_queue.pop()
                self.discard_packet(pkt_discard)

            # add the node generated packet to the head of the queue
            self.proc_queue.appendleft(pkt)

            # add to generated packets monitor
            self.generated.append([self.env.now, pkt])

            # report as per verbose level
            if self.verbose >= Globals.VERB_LO:
                Utils.report(
                    self.env.now,
                    self.name,
                    pkt,
                    self.proc_queue,
                    inspect.currentframe().f_code.co_name,
                    self.verbose,
                )

            yield self.env.timeout(Globals.SERVICE_INTERVAL)

    # def make_pkt(self, dest_node):
    #     """Creates a network packet
    #     """

    #     pkt = {}
    #     pkt[Globals.TIME_STAMP] = self.env.now
    #     pkt[Globals.ID] = Utils.gen_id()
    #     pkt[Globals.SOURCE] = self.name
    #     pkt[Globals.DEST_NODE] = dest_node
    #     pkt[Globals.HOP_NODE] = Globals.NONE  # the initial value
    #     pkt[Globals.DEST_TIME_STAMP] = -1.0  # the initial value
    #     pkt[Globals.NO_HOPS] = 0  # the initial value

    #     return pkt

    def generateGrantMsg(self):
        SICounter = 0
        grantArray = []
        allocatedBytes = 0
        self.allocateAssuredTcon2_3()
        sum = 0
        for onu in self.onu_queue_status:
            if self.M.G.nodes[onu][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE: # 5g onu
                sum = sum + self.onu_queue_status[onu][Globals.TCON1_ID] 



            # grantArray.append(packet.make_grant_object(onu, 100, 200))

        return grantArray

    # allocate resources for URLLC and EMBB and Video
    def allocateAssuredTcon2_3(self):
        allocationResult = self.initAllocationDict()
        if (self.FB_remaining <= 0):
            return allocationResult
        # FB > 0
        tcon1_2_AB_min_sum = 0
        tcon1_3_AB_min_sum = 0
        tcon2_3_AB_min_sum = 0
        onu_type1_count = 0
        onu_type2_count = 0
        
        for x in self.M.G.nodes():
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                onu_type1_count = onu_type1_count + 1
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                onu_type2_count = onu_type2_count + 1

        # get the summation of AB min for tcon2 (URLLC) and 3(EMBB and Video)
        for x in self.M.G.nodes():
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                tcon1_2_AB_min_sum = tcon1_2_AB_min_sum + self.vb_min_matrix[x][Globals.TCON1_ID]
                tcon1_3_AB_min_sum = tcon1_3_AB_min_sum + self.vb_min_matrix[x][Globals.TCON2_ID]
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                tcon2_3_AB_min_sum = tcon2_3_AB_min_sum + self.vb_min_matrix[x][Globals.TCON1_ID]

        # URLLC allocation
        if (self.FB_remaining >= tcon1_2_AB_min_sum):
            for x in self.M.G.nodes():
                if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                    allocationResult[x][Globals.TCON1_ID] = min(self.vb_min_matrix[x][Globals.TCON1_ID], self.onu_queue_status[x][[Globals.TCON1_ID]])
                    self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON1_ID]
                    self.vb_min_matrix[x][Globals.TCON1_ID] = self.vb_min_matrix[x][Globals.TCON1_ID] - allocationResult[x][Globals.TCON1_ID]
                    self.onu_queue_status[x][[Globals.TCON1_ID]] = self.onu_queue_status[x][[Globals.TCON1_ID]] - allocationResult[x][Globals.TCON1_ID] 
        else:
            while (self.FB_remaining > 0):
                tmp = int(self.FB_remaining / onu_type1_count) # distribute FB equally over URLLC onus
                if(tmp == 0):
                    break
                for x in self.M.G.nodes():
                    if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                        allocationResult[x][Globals.TCON1_ID] = min(self.onu_queue_status[x][[Globals.TCON1_ID]], tmp)
                        self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON1_ID]
                        self.vb_min_matrix[x][Globals.TCON1_ID] = self.vb_min_matrix[x][Globals.TCON1_ID] - allocationResult[x][Globals.TCON1_ID]
                        self.onu_queue_status[x][[Globals.TCON1_ID]] = self.onu_queue_status[x][[Globals.TCON1_ID]] - allocationResult[x][Globals.TCON1_ID]

        return allocationResult

    def allocateAssuredTcon3(self):
        allocationResult = self.initAllocationDict()
        if (self.FB_remaining <= 0):
            return allocationResult
        # FB > 0
        tcon1_2_AB_min_sum = 0
        tcon1_3_AB_min_sum = 0
        tcon2_3_AB_min_sum = 0
        onu_type1_count = 0
        onu_type2_count = 0
        
        for x in self.M.G.nodes():
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                onu_type1_count = onu_type1_count + 1
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                onu_type2_count = onu_type2_count + 1

        # get the summation of AB min for tcon2 (URLLC) and 3(EMBB and Video)
        for x in self.M.G.nodes():
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                tcon1_2_AB_min_sum = tcon1_2_AB_min_sum + self.vb_min_matrix[x][Globals.TCON1_ID]
                tcon1_3_AB_min_sum = tcon1_3_AB_min_sum + self.vb_min_matrix[x][Globals.TCON2_ID]
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                tcon2_3_AB_min_sum = tcon2_3_AB_min_sum + self.vb_min_matrix[x][Globals.TCON1_ID]

        # eMBB and allocation
        if (self.FB_remaining >= (tcon1_3_AB_min_sum + tcon2_3_AB_min_sum)):
            for x in self.M.G.nodes():
                if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                    allocationResult[x][Globals.TCON2_ID] = min(self.vb_min_matrix[x][Globals.TCON2_ID], self.onu_queue_status[x][[Globals.TCON2_ID]])
                    self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON2_ID]
                    self.vb_min_matrix[x][Globals.TCON2_ID] = self.vb_min_matrix[x][Globals.TCON2_ID] - allocationResult[x][Globals.TCON2_ID]
                    self.onu_queue_status[x][[Globals.TCON2_ID]] = self.onu_queue_status[x][[Globals.TCON2_ID]] - allocationResult[x][Globals.TCON2_ID]
                    
                if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                    allocationResult[x][Globals.TCON1_ID] = min(self.vb_min_matrix[x][Globals.TCON1_ID], self.onu_queue_status[x][[Globals.TCON1_ID]])
                    self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON1_ID]
                    self.vb_min_matrix[x][Globals.TCON1_ID] = self.vb_min_matrix[x][Globals.TCON1_ID] - allocationResult[x][Globals.TCON2_ID]
                    self.onu_queue_status[x][[Globals.TCON1_ID]] = self.onu_queue_status[x][[Globals.TCON1_ID]] - allocationResult[x][Globals.TCON1_ID]
        else:
            while (self.FB_remaining > 0):
                tmp = int(self.FB_remaining / (onu_type1_count + onu_type2_count)) # distribute FB equally over URLLC onus
                if(tmp == 0):
                    break
                for x in self.M.G.nodes():
                    if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                        allocationResult[x][Globals.TCON2_ID] = min(self.onu_queue_status[x][[Globals.TCON2_ID]], tmp)
                        self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON2_ID]
                        self.vb_min_matrix[x][Globals.TCON2_ID] = self.vb_min_matrix[x][Globals.TCON2_ID] - allocationResult[x][Globals.TCON2_ID]
                        self.onu_queue_status[x][[Globals.TCON2_ID]] = self.onu_queue_status[x][[Globals.TCON2_ID]] - allocationResult[x][Globals.TCON2_ID]
    
                    if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                        allocationResult[x][Globals.TCON1_ID] = min(self.onu_queue_status[x][[Globals.TCON1_ID]], tmp)
                        self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON1_ID]
                        self.vb_min_matrix[x][Globals.TCON1_ID] = self.vb_min_matrix[x][Globals.TCON2_ID] - allocationResult[x][Globals.TCON1_ID]
                        self.onu_queue_status[x][[Globals.TCON1_ID]] = self.onu_queue_status[x][[Globals.TCON1_ID]] - allocationResult[x][Globals.TCON1_ID]

        return allocationResult   

    def allocateSurplusTcon3(self):
        allocationResult = self.initAllocationDict() #{onu1 {TCON1: 0, TCON2: 0}}
        if (self.FB_remaining <= 0):
            return allocationResult
        # FB > 0
        
        tcon1_3_AB_sur_sum = 0
        tcon2_3_AB_sur_sum = 0
        onu_type1_count = 0
        onu_type2_count = 0
        
        for x in self.M.G.nodes():
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                onu_type1_count = onu_type1_count + 1
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                onu_type2_count = onu_type2_count + 1

        # get the summation of AB min for tcon2 (URLLC) and TCON3(eMBB and Video)
        for x in self.M.G.nodes():
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                tcon1_3_AB_sur_sum = tcon1_3_AB_sur_sum + self.vb_sur_matrix[x][Globals.TCON2_ID]
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                tcon2_3_AB_sur_sum = tcon2_3_AB_sur_sum + self.vb_sur_matrix[x][Globals.TCON1_ID]

        # eMBB and video surplus allocation
        if (self.FB_remaining >= (tcon1_3_AB_sur_sum + tcon2_3_AB_sur_sum)):
            for x in self.M.G.nodes():
                if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                    allocationResult[x][Globals.TCON2_ID] = min(self.vb_sur_matrix[x][Globals.TCON2_ID], self.onu_queue_status[x][[Globals.TCON2_ID]])
                    self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON2_ID]
                    self.vb_sur_matrix[x][Globals.TCON2_ID] = self.vb_sur_matrix[x][Globals.TCON2_ID] - allocationResult[x][Globals.TCON2_ID]
                    self.onu_queue_status[x][[Globals.TCON2_ID]] = self.onu_queue_status[x][[Globals.TCON2_ID]] - allocationResult[x][Globals.TCON2_ID]
                    
                if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                    allocationResult[x][Globals.TCON1_ID] = min(self.vb_sur_matrix[x][Globals.TCON1_ID], self.onu_queue_status[x][[Globals.TCON1_ID]])
                    self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON1_ID]
                    self.vb_sur_matrix[x][Globals.TCON1_ID] = self.vb_sur_matrix[x][Globals.TCON1_ID] - allocationResult[x][Globals.TCON2_ID]
                    self.onu_queue_status[x][[Globals.TCON1_ID]] = self.onu_queue_status[x][[Globals.TCON1_ID]] - allocationResult[x][Globals.TCON1_ID]
        else:
            while (self.FB_remaining > 0):
                tmp = int(self.FB_remaining / (onu_type1_count + onu_type2_count)) # distribute FB equally over TCON3 onus
                if(tmp == 0):
                    break
                for x in self.M.G.nodes():
                    if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE:
                        allocationResult[x][Globals.TCON2_ID] = min(self.onu_queue_status[x][[Globals.TCON2_ID]], tmp)
                        self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON2_ID]
                        self.vb_sur_matrix[x][Globals.TCON2_ID] = self.vb_sur_matrix[x][Globals.TCON2_ID] - allocationResult[x][Globals.TCON2_ID]
                        self.onu_queue_status[x][[Globals.TCON2_ID]] = self.onu_queue_status[x][[Globals.TCON2_ID]] - allocationResult[x][Globals.TCON2_ID]
    
                    if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                        allocationResult[x][Globals.TCON1_ID] = min(self.onu_queue_status[x][[Globals.TCON1_ID]], tmp)
                        self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON1_ID]
                        self.vb_sur_matrix[x][Globals.TCON1_ID] = self.vb_sur_matrix[x][Globals.TCON2_ID] - allocationResult[x][Globals.TCON1_ID]
                        self.onu_queue_status[x][[Globals.TCON1_ID]] = self.onu_queue_status[x][[Globals.TCON1_ID]] - allocationResult[x][Globals.TCON1_ID]

        return allocationResult
   
    def allocateTcon4(self):
        allocationResult = self.initAllocationDict() #{onu1 {TCON1: 0, TCON2: 0}}
        if (self.FB_remaining <= 0):
            return allocationResult
        # FB > 0
        #                 
        tcon2_4_AB_sum = 0
        onu_type2_count = 0
        
        for x in self.M.G.nodes():
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                onu_type2_count = onu_type2_count + 1

            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                tcon2_4_AB_sum = tcon2_4_AB_sum + self.vb_min_matrix[x][Globals.TCON1_ID]

        # eMBB and video surplus allocation
        if (self.FB_remaining >= tcon2_4_AB_sum):
            for x in self.M.G.nodes():                
                if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                    allocationResult[x][Globals.TCON2_ID] = min(self.vb_min_matrix[x][Globals.TCON2_ID], self.onu_queue_status[x][[Globals.TCON2_ID]])
                    self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON2_ID]
                    self.vb_min_matrix[x][Globals.TCON2_ID] = self.vb_min_matrix[x][Globals.TCON1_ID] - allocationResult[x][Globals.TCON2_ID]
                    self.onu_queue_status[x][[Globals.TCON2_ID]] = self.onu_queue_status[x][[Globals.TCON2_ID]] - allocationResult[x][Globals.TCON2_ID]
        else:
            while (self.FB_remaining > 0):
                tmp = int(self.FB_remaining / (onu_type2_count)) # distribute FB equally over TCON3 onus
                if(tmp == 0):
                    break
                for x in self.M.G.nodes():    
                    if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                        allocationResult[x][Globals.TCON2_ID] = min(self.onu_queue_status[x][[Globals.TCON2_ID]], tmp)
                        self.FB_remaining = self.FB_remaining - allocationResult[x][Globals.TCON2_ID]
                        self.vb_min_matrix[x][Globals.TCON2_ID] = self.vb_min_matrix[x][Globals.TCON2_ID] - allocationResult[x][Globals.TCON2_ID]
                        self.onu_queue_status[x][[Globals.TCON2_ID]] = self.onu_queue_status[x][[Globals.TCON2_ID]] - allocationResult[x][Globals.TCON2_ID]
        return allocationResult

    def initAllocationDict(self):
        allocationResult = {}
        for x in self.M.G.nodes():
            if self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE or self.M.G.nodes[x][Globals.NODE_TYPE_KWD] == Globals.ONU_TYPE2:
                allocationResult[x] = {Globals.TCON1_ID: 0, Globals.TCON2_ID: 0}

    def discard_packet(self, pkt):
        """Discards the packet (puts the packet into the node packet sink)"""

        # place this packet in the node sink
        self.discarded.append([self.env.now, pkt])

    def queue_monitor(self):
        """Queue monitor process"""

        while True:

            # add to queue monitor time now and queue_length
            self.queue_mon.append([self.env.now, len(self.proc_queue)])

            # incur monitor queue delay
            yield self.env.timeout(self.queue_monitor_deltat)
